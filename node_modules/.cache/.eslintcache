[{"/home/fenix/Projects/graphs/src/index.js":"1","/home/fenix/Projects/graphs/src/App.js":"2","/home/fenix/Projects/graphs/src/reportWebVitals.js":"3","/home/fenix/Projects/graphs/src/components/pie-chart/index.js":"4","/home/fenix/Projects/graphs/src/components/line-chart/index.js":"5"},{"size":492,"mtime":1651417686751,"results":"6","hashOfConfig":"7"},{"size":2982,"mtime":1651498484886,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1651133955197,"results":"9","hashOfConfig":"7"},{"size":1398,"mtime":1651413672621,"results":"10","hashOfConfig":"7"},{"size":972,"mtime":1651498205916,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u6huwq",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fenix/Projects/graphs/src/index.js",[],[],"/home/fenix/Projects/graphs/src/App.js",["29","30","31","32","33","34"],[],"import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Line from \"./components/line-chart\";\nimport Pie from \"./components/pie-chart\";\nimport PopulationData from \"./data/population.json\";\nimport PopulationGrowth from \"./data/population-growth.json\";\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      <Box p={3}>{children}</Box>\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function App() {\n  const [hoverData, setHoverData] = useState(null);\n  const [chartOptions, setChartOptions] = useState({\n    xAxis: {\n      categories: [\"1955\", \"1960\", \"1960\"],\n    },\n    series: [{ data: [100000000, 2, 3] }],\n    plotOptions: {\n      series: {\n        point: {\n          events: {\n            mouseOver(e) {\n              setHoverData(e.target.category);\n            },\n          },\n        },\n      },\n    },\n  });\n\n  const data = PopulationGrowth;\n  const newData = [];\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          <Tab label=\"Pie\" {...a11yProps(0)} />\n          <Tab label=\"Line\" {...a11yProps(1)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <div style={{ marginLeft: \"50px\" }}>\n          <Pie\n            data={PopulationData}\n            width={600}\n            height={600}\n            innerRadius={100}\n            outerRadius={300}\n          />{\" \"}\n        </div>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <div style={{ marginLeft: \"50px\" }}>\n          <Line />\n        </div>\n      </TabPanel>\n    </div>\n  );\n}\n","/home/fenix/Projects/graphs/src/reportWebVitals.js",[],[],"/home/fenix/Projects/graphs/src/components/pie-chart/index.js",["35","36"],[],"import React from \"react\";\nimport * as d3 from \"d3\";\n\nconst Arc = ({ data, index, createArc, colors, format }) => {\n  return (\n  <g key={index} className=\"arc\">\n    <path className=\"arc\" d={createArc(data)} fill={colors(index)} />\n    <text\n      transform={`translate(${createArc.centroid(data)})`}\n      textAnchor=\"middle\"\n      fill=\"black\"\n      fontSize=\"12\"\n    >\n      {data.data.name}\n    </text>\n  </g>\n)};\n\nconst Pie = props => {\n  const createPie = d3\n    .pie()\n    .value(d => d.value)\n    .sort(null);\n\n  const createArc = d3\n    .arc()\n    .innerRadius(props.innerRadius)\n    .outerRadius(props.outerRadius);\n\n  const colors = d3.scaleOrdinal(d3.schemeSet3);\n  const format = d3.format(\".2f\");\n  const data = createPie(props.data);\n  \n  const mergeData = (n, data) => {\n    let mergedData = 0;\n    for(let i = 0; i <= data.length; i++) {\n      if (i > n) {  \n        mergedData += data[i].value \n      }\n    }\n  }\n  return (\n    <svg width={props.width} height={props.height}>\n      <g transform={`translate(${props.outerRadius} ${props.outerRadius})`}>\n        {data.map((d, i) => \n        {\n          // if (i > 15)\n          return (\n          <Arc\n            key={i}\n            index={i}\n            data={d}\n            createArc={createArc}\n            colors={colors}\n            format={format}\n          />\n        )})}\n      </g>\n    </svg>\n  );\n};\n\nexport default Pie;\n","/home/fenix/Projects/graphs/src/components/line-chart/index.js",[],[],{"ruleId":"37","severity":1,"message":"38","line":1,"column":17,"nodeType":"39","messageId":"40","endLine":1,"endColumn":26},{"ruleId":"37","severity":1,"message":"41","line":54,"column":10,"nodeType":"39","messageId":"40","endLine":54,"endColumn":19},{"ruleId":"37","severity":1,"message":"42","line":55,"column":10,"nodeType":"39","messageId":"40","endLine":55,"endColumn":22},{"ruleId":"37","severity":1,"message":"43","line":55,"column":24,"nodeType":"39","messageId":"40","endLine":55,"endColumn":39},{"ruleId":"37","severity":1,"message":"44","line":73,"column":9,"nodeType":"39","messageId":"40","endLine":73,"endColumn":13},{"ruleId":"37","severity":1,"message":"45","line":74,"column":9,"nodeType":"39","messageId":"40","endLine":74,"endColumn":16},{"ruleId":"37","severity":1,"message":"46","line":34,"column":9,"nodeType":"39","messageId":"40","endLine":34,"endColumn":18},{"ruleId":"37","severity":1,"message":"47","line":38,"column":9,"nodeType":"39","messageId":"40","endLine":38,"endColumn":19},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'hoverData' is assigned a value but never used.","'chartOptions' is assigned a value but never used.","'setChartOptions' is assigned a value but never used.","'data' is assigned a value but never used.","'newData' is assigned a value but never used.","'mergeData' is assigned a value but never used.","'mergedData' is assigned a value but never used."]